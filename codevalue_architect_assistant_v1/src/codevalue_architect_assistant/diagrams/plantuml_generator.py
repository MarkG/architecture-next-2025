# -*- coding: utf-8 -*-
"""
Generates PlantUML syntax for dependency graphs.
"""

import logging
import networkx as nx
from ..models import DependencyMap
from pathlib import Path

def _sanitize_plantuml_alias(node_id: str) -> str:
    """
    Creates a reasonably safe alias for PlantUML components from a node ID.
    PlantUML aliases should generally be alphanumeric + underscore.
    """
    sanitized = str(node_id).replace("\\", "_").replace("/", "_")
    sanitized = "".join(c if c.isalnum() else '_' for c in sanitized)
    # Avoid starting with a number if possible, prepend underscore if it does
    if sanitized and sanitized[0].isdigit():
        sanitized = "_" + sanitized
    # Handle potential empty strings after sanitization
    if not sanitized:
        sanitized = "node_" + str(hash(node_id)) # Fallback to hash
    return sanitized

def generate_plantuml_diagram(dep_map: DependencyMap) -> str:
    """
    Generates a PlantUML component diagram string from a DependencyMap.

    Args:
        dep_map: The DependencyMap containing the networkx graph.

    Returns:
        A string containing the PlantUML diagram syntax.
    """
    if not isinstance(dep_map, DependencyMap) or not isinstance(dep_map.graph, nx.DiGraph):
        logging.error("Invalid DependencyMap or graph provided to PlantUML generator.")
        return ""

    graph = dep_map.graph
    if not graph:
        logging.warning("Dependency graph is empty. Generating empty PlantUML diagram.")
        return "@startuml\n' Empty Graph\n@enduml"

    plantuml_lines = ["@startuml", "' Dependency Diagram generated by CodeValue Architect Assistant"]
    plantuml_lines.append("skinparam componentStyle uml2") # Use UML2 styling for components

    # Define components (nodes) first
    nodes_defined = set()
    for node in graph.nodes():
        node_str = str(node)
        alias = _sanitize_plantuml_alias(node_str)
        if alias not in nodes_defined:
            # Use filepath as the component name, alias for referencing
            plantuml_lines.append(f'component "{node_str}" as {alias}')
            nodes_defined.add(alias)

    # Define relationships (edges)
    edges_added = set()
    for u, v, data in graph.edges(data=True):
        u_str = str(u)
        v_str = str(v)
        u_alias = _sanitize_plantuml_alias(u_str)
        v_alias = _sanitize_plantuml_alias(v_str)

        # Ensure nodes were defined (should be, but safety check)
        if u_alias not in nodes_defined:
             plantuml_lines.append(f'component "{u_str}" as {u_alias}')
             nodes_defined.add(u_alias)
        if v_alias not in nodes_defined:
             plantuml_lines.append(f'component "{v_str}" as {v_alias}')
             nodes_defined.add(v_alias)

        # Add relationship
        edge_tuple = tuple(sorted((u_alias, v_alias))) # Basic check against duplicate relationships
        if edge_tuple not in edges_added:
            plantuml_lines.append(f"{u_alias} --> {v_alias}")
            edges_added.add(edge_tuple)


    # Add unresolved dependencies (optional, could make diagram busy)
    # Example: Representing external dependencies
    # external_nodes = set()
    # for i, unresolved in enumerate(dep_map.unresolved_dependencies):
    #     source_alias = _sanitize_plantuml_alias(str(unresolved.source_file))
    #     target_label = unresolved.target_module
    #     # Create a unique alias for the external module if not seen before
    #     ext_alias = _sanitize_plantuml_alias(target_label) + "_ext"
    #     if ext_alias not in nodes_defined and ext_alias not in external_nodes:
    #         plantuml_lines.append(f'component "{target_label}" as {ext_alias} <<external>>') # Style external
    #         external_nodes.add(ext_alias)
    #
    #     # Add relationship if source exists
    #     if source_alias in nodes_defined and ext_alias in external_nodes:
    #          plantuml_lines.append(f"{source_alias} ..> {ext_alias}") # Dashed line


    if not edges_added and len(nodes_defined) <= 1 : # Check if only isolated nodes or empty
         plantuml_lines.append("' No dependencies found to visualize")

    plantuml_lines.append("@enduml")
    return "\n".join(plantuml_lines)